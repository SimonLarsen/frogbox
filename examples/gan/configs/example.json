{
    "type": "gan",
    "project": "frogbox-example",
    "batch_size": 32,
    "loader_workers": 4,
    "max_epochs": 16,
    "log_interval": "epoch_completed",
    "checkpoints": [
        {
            "metric": "PSNR",
            "mode": "max"
        }
    ],
    "datasets": {% include 'datasets.json' %},
    "model": {
        "class_name": "models.upscaler.Upscaler",
        "params": {
            "scale_factor": 2,
            "in_channels": 3,
            "out_channels": 3,
            "hidden_channels": 32,
            "num_layers": 4,
            "norm_groups": 4
        }
    },
    "disc_model": {
        "class_name": "models.discriminator.Discriminator",
        "params": {
            "in_channels": 3,
            "hidden_channels": 32,
            "num_blocks": 8
        }
    },
    "losses": {
        "L1": {
            "weight": 1.0,
            "class_name": "torch.nn.L1Loss"
        },
        "GAN-BCE": {
            "weight": 1.0,
            "class_name": "losses.gan.GANBCELoss"
        }
    },
    "disc_losses": {
        "BCE": {
            "weight": 1.0,
            "class_name": "losses.disc.DiscriminatorLoss"
        }
    },
    "metrics": {
        "SSIM": {
            "class_name": "torchmetrics.image.StructuralSimilarityIndexMeasure",
            "params": {"data_range": 1.0}
        },
        "PSNR": {
            "class_name": "torchmetrics.image.PeakSignalNoiseRatio",
            "params": {"data_range": 1.0}
        }
    },
    "loaders": {
        "train": {
            "class_name": "torch.utils.data.DataLoader",
            "params": {
                "shuffle": true,
                "drop_last": true
            }
        }
    },
    "optimizer": {
        "class_name": "torch.optim.AdamW",
        "params": {
            "lr": 3e-4,
            "betas": [0.5, 0.999]
        }
    },
    "disc_optimizer": {
        "class_name": "torch.optim.AdamW",
        "params": {
            "lr": 3e-4,
            "betas": [0.5, 0.999]
        }
    },
    "lr_scheduler": {
        "type": "cosine",
        "end_value": 1e-7
    },
    "disc_lr_scheduler": {
        "type": "cosine",
        "end_value": 1e-7
    }
}